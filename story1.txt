C语言中文网推出辅导班啦，包括「C语言辅导班、C++辅导班、算法/数据结构辅导班」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践 + 永久学习。QQ在线，随时响应！

什么叫规范？在C语言中不遵守编译器的规定，编译器在编译时就会报错，这个规定叫作规则。但是有一种规定，它是一种人为的、约定成俗的，即使不按照那种规定也不会出错，这种规定就叫作规范。

虽然我们不按照规范也不会出错，但是那样代码写得就会很乱。大家刚开始学习C语言的时候，第一步不是说要把程序写正确，而是要写规范。因为如果你养成一种非常不好的写代码的习惯，代码就会写得乱七八糟，等到将来工作面试的时候，这样的习惯可能会让你失去机会。
代码如何写才能规范
那么代码如何写才能写得很规范呢？代码的规范化不是说看完本节内容后就能实现的。它里面细节很多，而且需要不停地写代码练习，不停地领悟，慢慢地才能掌握的一种编程习惯。所以大家不要想着一下子就能把代码规范化的所有知识全部掌握，也不要想着一下子就能把代码写规范，这是不太可能的。

有很多知识，比如为什么代码要这样写，为什么不能那样写，作为一个初学者你是很难弄明白的。有很多规范是为了在程序代码量很大的时候，便于自己阅读，也便于别人阅读。

所以刚开始的时候有很多规范你不知道为什么要那样规定，你就单纯地模仿就行了。等将来敲代码敲得时间长了，你就会感觉到那样写是很有好处的。
代码规范化的好处
代码规范化的第一个好处就是看着很整齐、很舒服。假如你现在用不规范的方式写了一万行代码，现在能看得懂，但等过了三个月你再回头看时就很吃力了，更不要说给别人看了。所以代码要写规范，比如加注释就是代码规范化的一个思想。

在一般情况下，根据软件工程的思想，我们的注释要占整个文档的20%以上。所以注释要写得很详细，而且格式要写得很规范。

第二个好处是，把代码写规范则程序不容易出错。如果按照不规范的格式输入代码的话，很容易出错。而代码写规范的话即使出错了查错也会很方便。格式虽然不会影响程序的功能，但会影响可读性。程序的格式追求清晰、美观，是程序风格的重要构成元素。
代码规范化的七大原则
代码规范化基本上有七大原则，体现在空行、空格、成对书写、缩进、对齐、代码行、注释七方面的书写规范上。
1) 空行
空行起着分隔程序段落的作用。空行得体将使程序的布局更加清晰。空行不会浪费内存，虽然打印含有空行的程序会多消耗一些纸张，但是值得。

规则一：定义变量后要空行。尽可能在定义变量的同时初始化该变量，即遵循就近原则。如果变量的引用和定义相隔比较远，那么变量的初始化就很容易被忘记。若引用了未被初始化的变量，就会导致程序出错。

规则二：每个函数定义结束之后都要加空行。

总规则：两个相对独立的程序块、变量说明之后必须要加空行。比如上面几行代码完成的是一个功能，下面几行代码完成的是另一个功能，那么它们中间就要加空行。这样看起来更清晰。
2) 空格
规则一：关键字之后要留空格。像 const、case 等关键字之后至少要留一个空格，否则无法辨析关键字。像 if、for、while 等关键字之后应留一个空格再跟左括号(，以突出关键字。

规则二：函数名之后不要留空格，应紧跟左括号(，以与关键字区别。

规则三：(向后紧跟；)、,、;这三个向前紧跟；紧跟处不留空格。

规则四：,之后要留空格。如果;不是一行的结束符号，其后要留空格。

规则五：赋值运算符、关系运算符、算术运算符、逻辑运算符、位运算符，如 =、==、！=、+=、－=、*=、/=、%=、>>=、<<=、&=、^=、|=、>、<=、>、>=、+、－、*、/、%、&、|、&&、||、<<、>>、^ 等双目运算符的前后应当加空格。

注意，运算符“%”是求余运算符，与 printf 中 %d 的“%”不同，所以 %d 中的“%”前后不用加空格。

规则六：单目运算符 !、~、++、－－、－、*、& 等前后不加空格。

注意：
这里的“－”和规则五里面的“－”不同。这里的“－”是负号运算符，规则五里面的“－”是减法运算符。
这里的“*”和规则五里面的“*”也不同。这里的“*”是指针运算符，规则五里面的“*”是乘法运算符。
这里的“&”和规则五里面的“&”也不同。这里的“&”是取地址运算符，规则五里面的“&”是按位与运算符。

总之，规则六中的是单目运算符，而规则五中的是双目运算符，它们是不一样的。

规则七：像数组符号[]、结构体成员运算符.、指向结构体成员运算符->，这类操作符前后不加空格。

规则八：对于表达式比较长的 for 语句和 if 语句，为了紧凑起见，可以适当地去掉一些空格。但 for 和 if 后面紧跟的空格不可以删，其后面的语句可以根据语句的长度适当地去掉一些空格。例如：
for (i=0; i<10; i++)

for 和分号后面保留空格就可以了，=和<前后的空格可去掉。
3) 成对书写
成对的符号一定要成对书写，如 ()、{}。不要写完左括号然后写内容最后再补右括号，这样很容易漏掉右括号，尤其是写嵌套程序的时候。
4) 缩进
缩进是通过键盘上的 Tab 键实现的，缩进可以使程序更有层次感。原则是：如果地位相等，则不需要缩进；如果属于某一个代码的内部代码就需要缩进。
5) 对齐
对齐主要是针对大括号{}说的：

规则一：{和}分别都要独占一行。互为一对的{和}要位于同一列，并且与引用它们的语句左对齐。

规则二：{}之内的代码要向内缩进一个 Tab，且同一地位的要左对齐，地位不同的继续缩进。

还有需要注意的是，很多编程软件是会“自动对齐”的，比如：
#include <stdio.h>
int main(void)
{
    if (…)
    return 0;
}

写完 if 那一行后，按回车，此时光标在括号的右边，而此 if 下的大括号要写在与 if 左对齐的正下方，通常我们是按一下 Backspace 键使光标停在与 if 左对齐的正下方。但事实上我们不需要这样做，我们直接输入大括号即可，系统会自动对齐到与 if 左对齐的正下方。再接着看：
#include <stdio.h>
int main(void)
{
    if (…)
    {
        while (…)
    }
    return 0;
}

写完 while 那一行后，按回车，此时光标不是停在与 while 左对齐的正下方，同样，我们不需要按 Backspace，直接输入大括号即可，系统会自动对齐到与 while 左对齐的正下方的。

此外编程软件还有“对齐、缩进修正”功能。就是按 Ctrl+A 全选，然后按 Alt+F8，这时程序中所有成对的大括号都会自动对齐，未缩进的也会自动缩进。不管是在编程过程中，还是在编写结束完之后，都可以使用这个技巧。但如果完全按照规范写，那根本就不需要这个技巧，所以，这只是一个辅助功能。
6) 代码行
规则一：一行代码只做一件事情，如只定义一个变量，或只写一条语句。这样的代码容易阅读，并且便于写注释。

规则二：if、else、for、while、do 等语句自占一行，执行语句不得紧跟其后。此外，非常重要的一点是，不论执行语句有多少行，就算只有一行也要加{}，并且遵循对齐的原则，这样可以防止书写失误。
7) 注释
C语言中一行注释一般采用//…，多行注释必须采用/*…*/。注释通常用于重要的代码行或段落提示。在一般情况下，源程序有效注释量必须在 20% 以上。虽然注释有助于理解代码，但注意不可过多地使用注释。

规则一：注释是对代码的“提示”，而不是文档。程序中的注释不可喧宾夺主，注释太多会让人眼花缭乱。

规则二：如果代码本来就是清楚的，则不必加注释。例如：
i++;  //i加1

这个就是多余的注释。

规则三：边写代码边注释，修改代码的同时要修改相应的注释，以保证注释与代码的一致性，不再有用的注释要删除。

规则四：当代码比较长，特别是有多重嵌套的时候，应当在段落的结束处加注释，这样便于阅读。

规则五：每一条宏定义的右边必须要有注释，说明其作用。
